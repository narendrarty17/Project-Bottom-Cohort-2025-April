{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/GitHub/Project-Top-Cohort-2025-April/05/01_initial/app/api/portfolio/route.js"],"sourcesContent":["// app/api/portfolio/route.js\n\nimport { NextResponse } from 'next/server';\nimport fs from 'fs/promises'; // Node.js file system promises API\nimport path from 'path';     // Node.js path module\n\n// --- Configuration ---\n// Define the base directory for storing user data files\nconst dataDir = path.join(process.cwd(), 'data', 'watchlistPortfolio');\n\n// --- Helper Functions ---\n\n/**\n * Generates the full file path for a given username.\n * @param {string} username - The username.\n * @returns {string} The absolute path to the user's JSON data file.\n */\nconst getUserFilePath = (username) => path.join(dataDir, `${username}.json`);\n\n/**\n * Ensures the data directory exists. Creates it if it doesn't.\n */\nasync function ensureDataDirectoryExists() {\n    try {\n        await fs.mkdir(dataDir, { recursive: true }); // recursive: true prevents error if dir exists\n    } catch (error) {\n        // We only care about errors other than the directory already existing\n        if (error.code !== 'EEXIST') {\n            console.error(\"Fatal Error: Could not create data directory:\", dataDir, error);\n            // This is a server configuration issue, throw a critical error\n            throw new Error(\"Server configuration error preventing data storage.\");\n        }\n    }\n}\n\n/**\n * Reads and parses the JSON data for a specific user.\n * @param {string} username - The username whose data needs to be read.\n * @returns {Promise<object | null>} A promise that resolves to the parsed user data object,\n * or null if the user's file doesn't exist.\n * @throws {Error} If reading or parsing fails for reasons other than file not found.\n */\nasync function readUserData(username) {\n    const filePath = getUserFilePath(username);\n    try {\n        const jsonData = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(jsonData);\n    } catch (error) {\n        if (error.code === 'ENOENT') {\n            // File doesn't exist for this user yet, which is a valid state\n            return null;\n        }\n        // Log and re-throw other errors (permission issues, JSON parse errors, etc.)\n        console.error(`Error reading data file for user ${username}:`, error);\n        throw new Error(`Failed to read data for user ${username}.`);\n    }\n}\n\n/**\n * Writes user data object to a JSON file.\n * @param {string} username - The username whose data needs to be written.\n * @param {object} data - The user data object to write.\n * @throws {Error} If writing fails.\n */\nasync function writeUserData(username, data) {\n    const filePath = getUserFilePath(username);\n    try {\n        // Ensure the directory exists before attempting to write\n        await ensureDataDirectoryExists();\n        // Convert data to JSON string with pretty printing (2 spaces indentation)\n        const jsonData = JSON.stringify(data, null, 2);\n        await fs.writeFile(filePath, jsonData, 'utf-8');\n    } catch (error) {\n        // Log and re-throw write errors\n        console.error(`Error writing data file for user ${username}:`, error);\n        throw new Error(`Failed to save data for user ${username}.`);\n    }\n}\n\n// --- API Handlers ---\n\n// GET Handler (Existing, slightly refactored to use helpers)\nexport async function GET(request) {\n    // !!! TEMPORARY: Hardcoding username. Replace with auth logic. !!!\n    const username = 'Ram';\n\n    try {\n        const userData = await readUserData(username);\n\n        // If user file exists, return their portfolio or an empty array if no portfolio key\n        // If user file doesn't exist (userData is null), return empty array\n        const portfolio = userData?.portfolio || [];\n        return NextResponse.json({ portfolio });\n\n    } catch (error) {\n        // Handle errors thrown by readUserData (excluding file not found)\n        console.error(\"API Portfolio GET Processing Error:\", error);\n        return NextResponse.json(\n            { message: error.message || 'Failed to retrieve portfolio data.' },\n            { status: 500 } // Internal Server Error\n        );\n    }\n}\n\n// POST Handler (Add a new stock to the portfolio)\nexport async function POST(request) {\n    // !!! TEMPORARY: Hardcoding username. Replace with auth logic. !!!\n    const username = 'Ram';\n\n    try {\n        // 1. Get the new stock data from the request body\n        const newStock = await request.json();\n\n        // 2. Basic Validation (adjust required fields as needed)\n        if (!newStock || !newStock.name || newStock.quantity == null || newStock.avgPrice == null || newStock.currentPrice == null) {\n            return NextResponse.json({ message: 'Missing required stock fields (name, quantity, avgPrice, currentPrice).' }, { status: 400 }); // Bad Request\n        }\n\n        // 3. Read existing user data (or get null if file doesn't exist)\n        let userData = await readUserData(username);\n\n        // 4. Initialize user data if it doesn't exist\n        if (!userData) {\n            userData = { watchlist: [], portfolio: [] };\n        }\n        // Ensure portfolio array exists\n        if (!userData.portfolio) {\n            userData.portfolio = [];\n        }\n\n        // 5. Check if stock already exists in portfolio (by name)\n        const existingStockIndex = userData.portfolio.findIndex(stock => stock.name === newStock.name);\n        if (existingStockIndex !== -1) {\n            return NextResponse.json({ message: `Stock '${newStock.name}' already exists in the portfolio.` }, { status: 409 }); // Conflict\n        }\n\n        // 6. Add the new stock\n        userData.portfolio.push(newStock);\n\n        // 7. Write updated data back to file\n        await writeUserData(username, userData);\n\n        // 8. Return success response\n        return NextResponse.json({ message: 'Stock added successfully.', addedStock: newStock }, { status: 201 }); // Created\n\n    } catch (error) {\n        // Handle JSON parsing errors, file I/O errors, etc.\n        console.error(\"API Portfolio POST Error:\", error);\n        // Check if it's a known error type we threw\n        const errorMessage = error instanceof Error ? error.message : 'Failed to add stock to portfolio.';\n        return NextResponse.json(\n            { message: errorMessage },\n            { status: (error instanceof SyntaxError) ? 400 : 500 } // Bad request for JSON parse errors, 500 otherwise\n        );\n    }\n}\n\n// DELETE Handler (Remove a stock from the portfolio)\nexport async function DELETE(request) {\n    // !!! TEMPORARY: Hardcoding username. Replace with auth logic. !!!\n    const username = 'Ram';\n\n    try {\n        // 1. Get the name of the stock to delete from URL query parameters\n        const { searchParams } = new URL(request.url);\n        const stockNameToDelete = searchParams.get('name');\n\n        if (!stockNameToDelete) {\n            return NextResponse.json({ message: 'Missing stock name parameter to delete.' }, { status: 400 }); // Bad Request\n        }\n\n        // 2. Read existing user data\n        let userData = await readUserData(username);\n\n        // 3. Check if user data or portfolio exists\n        if (!userData || !userData.portfolio || userData.portfolio.length === 0) {\n            return NextResponse.json({ message: `Portfolio not found or empty for user ${username}.` }, { status: 404 }); // Not Found\n        }\n\n        // 4. Find the stock to delete\n        const initialLength = userData.portfolio.length;\n        userData.portfolio = userData.portfolio.filter(stock => stock.name !== stockNameToDelete);\n\n        // 5. Check if any stock was actually removed\n        if (userData.portfolio.length === initialLength) {\n            return NextResponse.json({ message: `Stock '${stockNameToDelete}' not found in the portfolio.` }, { status: 404 }); // Not Found\n        }\n\n        // 6. Write updated data back to file\n        await writeUserData(username, userData);\n\n        // 7. Return success response\n        return NextResponse.json({ message: `Stock '${stockNameToDelete}' deleted successfully.`, portfolio: userData.portfolio }); // OK\n\n    } catch (error) {\n        console.error(\"API Portfolio DELETE Error:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Failed to delete stock from portfolio.';\n        return NextResponse.json(\n            { message: errorMessage },\n            { status: 500 } // Internal Server Error\n        );\n    }\n}\n\n// PUT Handler (Update an existing stock in the portfolio)\nexport async function PUT(request) {\n    // !!! TEMPORARY: Hardcoding username. Replace with auth logic. !!!\n    const username = 'Ram';\n\n    try {\n        // 1. Get the name of the stock to update from URL query parameters\n        const { searchParams } = new URL(request.url);\n        const stockNameToUpdate = searchParams.get('name');\n\n        if (!stockNameToUpdate) {\n            return NextResponse.json({ message: 'Missing stock name parameter to update.' }, { status: 400 }); // Bad Request\n        }\n\n        // 2. Get the updated stock data from the request body\n        const updatedData = await request.json();\n\n        // 3. Basic Validation (at least one updatable field should be present)\n        // Note: We allow partial updates (e.g., just quantity, or just prices)\n        if (!updatedData || (updatedData.quantity == null && updatedData.avgPrice == null && updatedData.currentPrice == null)) {\n             return NextResponse.json({ message: 'No update data provided (e.g., quantity, avgPrice, currentPrice).' }, { status: 400 }); // Bad Request\n        }\n\n        // 4. Read existing user data\n        let userData = await readUserData(username);\n\n        // 5. Check if user data or portfolio exists\n        if (!userData || !userData.portfolio) {\n            return NextResponse.json({ message: `Portfolio not found for user ${username}.` }, { status: 404 }); // Not Found\n        }\n\n        // 6. Find the index of the stock to update\n        const stockIndex = userData.portfolio.findIndex(stock => stock.name === stockNameToUpdate);\n\n        if (stockIndex === -1) {\n            return NextResponse.json({ message: `Stock '${stockNameToUpdate}' not found in the portfolio.` }, { status: 404 }); // Not Found\n        }\n\n        // 7. Update the stock data (merge existing with new data)\n        // Only update fields that are provided in the request body\n        const originalStock = userData.portfolio[stockIndex];\n        const updatedStock = {\n            ...originalStock, // Keep original data\n            // Overwrite with new data if provided\n            quantity: updatedData.quantity ?? originalStock.quantity,\n            avgPrice: updatedData.avgPrice ?? originalStock.avgPrice,\n            currentPrice: updatedData.currentPrice ?? originalStock.currentPrice,\n        };\n        userData.portfolio[stockIndex] = updatedStock;\n\n        // 8. Write updated data back to file\n        await writeUserData(username, userData);\n\n        // 9. Return success response\n        return NextResponse.json({ message: `Stock '${stockNameToUpdate}' updated successfully.`, updatedStock }); // OK\n\n    } catch (error) {\n        console.error(\"API Portfolio PUT Error:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Failed to update stock in portfolio.';\n        return NextResponse.json(\n            { message: errorMessage },\n            { status: (error instanceof SyntaxError) ? 400 : 500 } // Bad request for JSON errors, 500 otherwise\n        );\n    }\n}"],"names":[],"mappings":"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","debugId":null}}]
}