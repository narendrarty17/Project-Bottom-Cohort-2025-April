{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/GitHub/Project-Top-Cohort-2025-April/05/02_Final/app/api/watchlist/route.js"],"sourcesContent":["// app/api/watchlist/route.js\n\nimport { NextResponse } from 'next/server';\nimport fs from 'fs/promises'; // Node.js file system promises API\nimport path from 'path';     // Node.js path module\n\n// --- Configuration ---\n// Define the base directory for storing user data files\nconst dataDir = path.join(process.cwd(), 'data', 'watchlistPortfolio');\n\n// --- Helper Functions (Identical to the ones in portfolio API) ---\n\n/**\n * Generates the full file path for a given username.\n */\nconst getUserFilePath = (username) => path.join(dataDir, `${username}.json`);\n\n/**\n * Ensures the data directory exists. Creates it if it doesn't.\n */\nasync function ensureDataDirectoryExists() {\n    try {\n        await fs.mkdir(dataDir, { recursive: true });\n    } catch (error) {\n        if (error.code !== 'EEXIST') {\n            console.error(\"Fatal Error: Could not create data directory:\", dataDir, error);\n            throw new Error(\"Server configuration error preventing data storage.\");\n        }\n    }\n}\n\n/**\n * Reads and parses the JSON data for a specific user.\n * Resolves to the parsed object or null if the file doesn't exist.\n */\nasync function readUserData(username) {\n    const filePath = getUserFilePath(username);\n    try {\n        const jsonData = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(jsonData);\n    } catch (error) {\n        if (error.code === 'ENOENT') {\n            return null; // File not found is a valid state\n        }\n        console.error(`Error reading data file for user ${username}:`, error);\n        throw new Error(`Failed to read data for user ${username}.`);\n    }\n}\n\n/**\n * Writes user data object to a JSON file.\n */\nasync function writeUserData(username, data) {\n    const filePath = getUserFilePath(username);\n    try {\n        await ensureDataDirectoryExists();\n        const jsonData = JSON.stringify(data, null, 2);\n        await fs.writeFile(filePath, jsonData, 'utf-8');\n    } catch (error) {\n        console.error(`Error writing data file for user ${username}:`, error);\n        throw new Error(`Failed to save data for user ${username}.`);\n    }\n}\n\n// --- API Handlers for Watchlist ---\n\n// GET Handler (Read watchlist)\nexport async function GET(request) {\n    // !!! TEMPORARY: Hardcoding username. Replace with auth logic. !!!\n    const username = 'Ram';\n\n    try {\n        const userData = await readUserData(username);\n        // Return user's watchlist or empty array if no data or no watchlist key\n        const watchlist = userData?.watchlist || [];\n        return NextResponse.json({ watchlist });\n\n    } catch (error) {\n        console.error(\"API Watchlist GET Processing Error:\", error);\n        return NextResponse.json(\n            { message: error.message || 'Failed to retrieve watchlist data.' },\n            { status: 500 }\n        );\n    }\n}\n\n// POST Handler (Add a stock to the watchlist)\nexport async function POST(request) {\n    // !!! TEMPORARY: Hardcoding username. !!!\n    const username = 'Ram';\n\n    try {\n        // 1. Get the new stock data from the request body\n        const newStock = await request.json();\n\n        // 2. Basic Validation (adjust required fields as needed for watchlist)\n        if (!newStock || !newStock.name) { // Name is likely the minimum requirement\n            return NextResponse.json({ message: 'Missing required stock field: name.' }, { status: 400 });\n        }\n        // Add defaults for optional fields if necessary\n        const stockToAdd = {\n            name: newStock.name,\n            price: newStock.price ?? 0, // Default to 0 if not provided\n            changePercent: newStock.changePercent ?? 0, // Default to 0\n            description: newStock.description ?? '', // Default to empty string\n        };\n\n\n        // 3. Read existing user data (or get null)\n        let userData = await readUserData(username);\n\n        // 4. Initialize user data if it doesn't exist\n        if (!userData) {\n            userData = { watchlist: [], portfolio: [] };\n        }\n        // Ensure watchlist array exists\n        if (!userData.watchlist) {\n            userData.watchlist = [];\n        }\n\n        // 5. Check if stock already exists in watchlist (by name)\n        const existingStockIndex = userData.watchlist.findIndex(stock => stock.name === stockToAdd.name);\n        if (existingStockIndex !== -1) {\n            return NextResponse.json({ message: `Stock '${stockToAdd.name}' already exists in the watchlist.` }, { status: 409 }); // Conflict\n        }\n\n        // 6. Add the new stock\n        userData.watchlist.push(stockToAdd);\n\n        // 7. Write updated data back\n        await writeUserData(username, userData);\n\n        // 8. Return success response\n        return NextResponse.json({ message: 'Stock added to watchlist successfully.', addedStock: stockToAdd }, { status: 201 }); // Created\n\n    } catch (error) {\n        console.error(\"API Watchlist POST Error:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Failed to add stock to watchlist.';\n        return NextResponse.json(\n            { message: errorMessage },\n            { status: (error instanceof SyntaxError) ? 400 : 500 }\n        );\n    }\n}\n\n// DELETE Handler (Remove a stock from the watchlist)\nexport async function DELETE(request) {\n    // !!! TEMPORARY: Hardcoding username. !!!\n    const username = 'Ram';\n\n    try {\n        // 1. Get stock name from query parameters\n        const { searchParams } = new URL(request.url);\n        const stockNameToDelete = searchParams.get('name');\n\n        if (!stockNameToDelete) {\n            return NextResponse.json({ message: 'Missing stock name parameter to delete.' }, { status: 400 });\n        }\n\n        // 2. Read user data\n        let userData = await readUserData(username);\n\n        // 3. Check if user data or watchlist exists\n        if (!userData || !userData.watchlist || userData.watchlist.length === 0) {\n            return NextResponse.json({ message: `Watchlist not found or empty for user ${username}.` }, { status: 404 });\n        }\n\n        // 4. Filter out the stock to delete\n        const initialLength = userData.watchlist.length;\n        userData.watchlist = userData.watchlist.filter(stock => stock.name !== stockNameToDelete);\n\n        // 5. Check if anything was removed\n        if (userData.watchlist.length === initialLength) {\n            return NextResponse.json({ message: `Stock '${stockNameToDelete}' not found in the watchlist.` }, { status: 404 });\n        }\n\n        // 6. Write updated data back\n        await writeUserData(username, userData);\n\n        // 7. Return success response\n        return NextResponse.json({ message: `Stock '${stockNameToDelete}' deleted from watchlist successfully.`, watchlist: userData.watchlist }); // OK\n\n    } catch (error) {\n        console.error(\"API Watchlist DELETE Error:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Failed to delete stock from watchlist.';\n        return NextResponse.json({ message: errorMessage }, { status: 500 });\n    }\n}\n\n// PUT Handler (Update a stock in the watchlist - e.g., update description)\n// Note: Updating price/changePercent here might not be standard practice,\n// as those are often fetched live. We allow updating description/price/change for completeness.\nexport async function PUT(request) {\n    // !!! TEMPORARY: Hardcoding username. !!!\n    const username = 'Ram';\n\n    try {\n        // 1. Get stock name from query parameters\n        const { searchParams } = new URL(request.url);\n        const stockNameToUpdate = searchParams.get('name');\n\n        if (!stockNameToUpdate) {\n            return NextResponse.json({ message: 'Missing stock name parameter to update.' }, { status: 400 });\n        }\n\n        // 2. Get update data from request body\n        const updatedData = await request.json();\n\n        // 3. Basic Validation (allow updating description, price, changePercent)\n        if (!updatedData || (updatedData.description == null && updatedData.price == null && updatedData.changePercent == null)) {\n             return NextResponse.json({ message: 'No update data provided (e.g., description, price, changePercent).' }, { status: 400 });\n        }\n\n        // 4. Read user data\n        let userData = await readUserData(username);\n\n        // 5. Check if user data or watchlist exists\n        if (!userData || !userData.watchlist) {\n            return NextResponse.json({ message: `Watchlist not found for user ${username}.` }, { status: 404 });\n        }\n\n        // 6. Find the index of the stock to update\n        const stockIndex = userData.watchlist.findIndex(stock => stock.name === stockNameToUpdate);\n\n        if (stockIndex === -1) {\n            return NextResponse.json({ message: `Stock '${stockNameToUpdate}' not found in the watchlist.` }, { status: 404 });\n        }\n\n        // 7. Update the stock data (merge existing with new data)\n        const originalStock = userData.watchlist[stockIndex];\n        const updatedStock = {\n            ...originalStock,\n            // Overwrite with new data only if provided in the request body\n            description: updatedData.description ?? originalStock.description,\n            price: updatedData.price ?? originalStock.price,\n            changePercent: updatedData.changePercent ?? originalStock.changePercent,\n        };\n        userData.watchlist[stockIndex] = updatedStock;\n\n        // 8. Write updated data back\n        await writeUserData(username, userData);\n\n        // 9. Return success response\n        return NextResponse.json({ message: `Stock '${stockNameToUpdate}' updated in watchlist successfully.`, updatedStock }); // OK\n\n    } catch (error) {\n        console.error(\"API Watchlist PUT Error:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Failed to update stock in watchlist.';\n        return NextResponse.json(\n            { message: errorMessage },\n            { status: (error instanceof SyntaxError) ? 400 : 500 }\n        );\n    }\n}"],"names":[],"mappings":"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","debugId":null}}]
}