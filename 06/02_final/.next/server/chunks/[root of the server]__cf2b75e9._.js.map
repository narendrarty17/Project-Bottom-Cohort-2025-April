{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/06/02_final/app/api/gemini-stock-predict/route.js"],"sourcesContent":["// app/api/gemini-stock-predict/route.js\nimport { NextResponse } from 'next/server';\n\n// Define the Gemini model you want to use.\n// Popular choices: 'gemini-1.5-flash-latest', 'gemini-1.5-pro-latest', 'gemini-1.0-pro'\n// 'gemini-1.5-flash-latest' is often a good balance of capability and speed/cost.\nconst GEMINI_MODEL_NAME = 'gemini-1.5-flash-latest';\n\nexport async function POST(request) {\n    try {\n        const body = await request.json();\n        const { query, generationConfig, safetySettings } = body; // Allow passing config from client\n\n        if (!query || typeof query !== 'string' || query.trim() === \"\") {\n            return NextResponse.json({ message: 'Invalid query provided.' }, { status: 400 });\n        }\n\n        // 1. Retrieve your Gemini API Key securely\n        const GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n        if (!GEMINI_API_KEY) {\n            console.error(\"Gemini API Key not configured in .env.local\");\n            return NextResponse.json({ message: 'API Key not configured on server.' }, { status: 500 });\n        }\n\n        // 2. Prepare the request payload for the Gemini API\n        const prompt = `Provide a stock prediction or analysis for: ${query}. Analyze its potential future performance, considering recent news, market trends, and historical data if possible. Be comprehensive but concise. Disclaimer: This is AI-generated and not financial advice.`;\n\n        const geminiPayload = {\n            contents: [{\n                parts: [{ text: prompt }]\n            }],\n            // Optional: You can add generationConfig and safetySettings\n            // These can also be passed from the client if needed\n            ...(generationConfig && { generationConfig }),\n            ...(safetySettings && { safetySettings }),\n        };\n\n        // Example: Default generationConfig if not provided\n        // if (!geminiPayload.generationConfig) {\n        //     geminiPayload.generationConfig = {\n        //         temperature: 0.7,\n        //         topK: 1,\n        //         topP: 1,\n        //         maxOutputTokens: 512,\n        //     };\n        // }\n\n        // Example: Default safetySettings if not provided\n        // if (!geminiPayload.safetySettings) {\n        //     geminiPayload.safetySettings = [\n        //         { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },\n        //         { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },\n        //         { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },\n        //         { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },\n        //     ];\n        // }\n\n\n        // 3. Make the actual API call to Gemini.\n        //    The endpoint for generating content is:\n        //    https://generativelanguage.googleapis.com/v1beta/models/YOUR_MODEL_NAME:generateContent?key=YOUR_API_KEY\n        const apiEndpoint = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL_NAME}:generateContent?key=${GEMINI_API_KEY}`;\n\n        console.log('Sending request to Gemini API:', apiEndpoint);\n        console.log('Payload:', JSON.stringify(geminiPayload, null, 2));\n\n        const geminiResponse = await fetch(apiEndpoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(geminiPayload),\n        });\n\n        // 4. Handle the response from Gemini.\n        if (!geminiResponse.ok) {\n            let errorData;\n            try {\n                errorData = await geminiResponse.json();\n                console.error('Gemini API Error Data:', errorData);\n            } catch (e) {\n                // If response is not JSON (e.g., HTML error page)\n                const errorText = await geminiResponse.text();\n                console.error('Gemini API Error (Non-JSON):', errorText);\n                errorData = { error: { message: errorText }};\n            }\n            const errorMessage = errorData?.error?.message || `Gemini API Error: ${geminiResponse.status} ${geminiResponse.statusText}`;\n            return NextResponse.json({ message: errorMessage }, { status: geminiResponse.status });\n        }\n\n        const geminiResult = await geminiResponse.json();\n        console.log('Gemini API Success Response:', JSON.stringify(geminiResult, null, 2));\n\n        // 5. Extract the relevant prediction data from geminiResult.\n        //    This structure is typical for generateContent responses.\n        let predictionText = \"Could not extract text from Gemini response.\";\n        if (geminiResult.candidates && geminiResult.candidates.length > 0 &&\n            geminiResult.candidates[0].content &&\n            geminiResult.candidates[0].content.parts &&\n            geminiResult.candidates[0].content.parts.length > 0 &&\n            geminiResult.candidates[0].content.parts[0].text) {\n            predictionText = geminiResult.candidates[0].content.parts[0].text;\n        } else if (geminiResult.promptFeedback && geminiResult.promptFeedback.blockReason) {\n            // Handle cases where content is blocked due to safety settings or other reasons\n            predictionText = `Content generation blocked. Reason: ${geminiResult.promptFeedback.blockReason}`;\n            if(geminiResult.promptFeedback.blockReasonMessage) {\n                 predictionText += ` Message: ${geminiResult.promptFeedback.blockReasonMessage}`;\n            }\n             console.warn('Gemini content generation blocked:', geminiResult.promptFeedback);\n             return NextResponse.json({ message: predictionText, details: geminiResult.promptFeedback }, { status: 400 }); // Or a more appropriate status\n        } else {\n            console.warn('Unexpected Gemini response structure for text extraction.');\n        }\n\n        return NextResponse.json({ prediction: predictionText });\n\n    } catch (error) {\n        console.error('API Route Error:', error);\n        // Check if the error is a FetchError (e.g. network issue)\n        if (error.name === 'FetchError' || error.cause) { // Node.js fetch might have a 'cause'\n             return NextResponse.json({ message: `Network error communicating with Gemini API: ${error.message}` }, { status: 503 }); // Service Unavailable\n        }\n        return NextResponse.json({ message: error.message || 'An unexpected error occurred on the server.' }, { status: 500 });\n    }\n}"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACxC;;AAEA,2CAA2C;AAC3C,wFAAwF;AACxF,kFAAkF;AAClF,MAAM,oBAAoB;AAEnB,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAG,MAAM,mCAAmC;QAE7F,IAAI,CAAC,SAAS,OAAO,UAAU,YAAY,MAAM,IAAI,OAAO,IAAI;YAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,2CAA2C;QAC3C,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;QACjD,IAAI,CAAC,gBAAgB;YACjB,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QAEA,oDAAoD;QACpD,MAAM,SAAS,CAAC,4CAA4C,EAAE,MAAM,6MAA6M,CAAC;QAElR,MAAM,gBAAgB;YAClB,UAAU;gBAAC;oBACP,OAAO;wBAAC;4BAAE,MAAM;wBAAO;qBAAE;gBAC7B;aAAE;YACF,4DAA4D;YAC5D,qDAAqD;YACrD,GAAI,oBAAoB;gBAAE;YAAiB,CAAC;YAC5C,GAAI,kBAAkB;gBAAE;YAAe,CAAC;QAC5C;QAEA,oDAAoD;QACpD,yCAAyC;QACzC,yCAAyC;QACzC,4BAA4B;QAC5B,mBAAmB;QACnB,mBAAmB;QACnB,gCAAgC;QAChC,SAAS;QACT,IAAI;QAEJ,kDAAkD;QAClD,uCAAuC;QACvC,uCAAuC;QACvC,yFAAyF;QACzF,0FAA0F;QAC1F,gGAAgG;QAChG,gGAAgG;QAChG,SAAS;QACT,IAAI;QAGJ,yCAAyC;QACzC,6CAA6C;QAC7C,8GAA8G;QAC9G,MAAM,cAAc,CAAC,wDAAwD,EAAE,kBAAkB,qBAAqB,EAAE,gBAAgB;QAExI,QAAQ,GAAG,CAAC,kCAAkC;QAC9C,QAAQ,GAAG,CAAC,YAAY,KAAK,SAAS,CAAC,eAAe,MAAM;QAE5D,MAAM,iBAAiB,MAAM,MAAM,aAAa;YAC5C,QAAQ;YACR,SAAS;gBACL,gBAAgB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;QACzB;QAEA,sCAAsC;QACtC,IAAI,CAAC,eAAe,EAAE,EAAE;YACpB,IAAI;YACJ,IAAI;gBACA,YAAY,MAAM,eAAe,IAAI;gBACrC,QAAQ,KAAK,CAAC,0BAA0B;YAC5C,EAAE,OAAO,GAAG;gBACR,kDAAkD;gBAClD,MAAM,YAAY,MAAM,eAAe,IAAI;gBAC3C,QAAQ,KAAK,CAAC,gCAAgC;gBAC9C,YAAY;oBAAE,OAAO;wBAAE,SAAS;oBAAU;gBAAC;YAC/C;YACA,MAAM,eAAe,WAAW,OAAO,WAAW,CAAC,kBAAkB,EAAE,eAAe,MAAM,CAAC,CAAC,EAAE,eAAe,UAAU,EAAE;YAC3H,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAa,GAAG;gBAAE,QAAQ,eAAe,MAAM;YAAC;QACxF;QAEA,MAAM,eAAe,MAAM,eAAe,IAAI;QAC9C,QAAQ,GAAG,CAAC,gCAAgC,KAAK,SAAS,CAAC,cAAc,MAAM;QAE/E,6DAA6D;QAC7D,8DAA8D;QAC9D,IAAI,iBAAiB;QACrB,IAAI,aAAa,UAAU,IAAI,aAAa,UAAU,CAAC,MAAM,GAAG,KAC5D,aAAa,UAAU,CAAC,EAAE,CAAC,OAAO,IAClC,aAAa,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,IACxC,aAAa,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAClD,aAAa,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE;YAClD,iBAAiB,aAAa,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI;QACrE,OAAO,IAAI,aAAa,cAAc,IAAI,aAAa,cAAc,CAAC,WAAW,EAAE;YAC/E,gFAAgF;YAChF,iBAAiB,CAAC,oCAAoC,EAAE,aAAa,cAAc,CAAC,WAAW,EAAE;YACjG,IAAG,aAAa,cAAc,CAAC,kBAAkB,EAAE;gBAC9C,kBAAkB,CAAC,UAAU,EAAE,aAAa,cAAc,CAAC,kBAAkB,EAAE;YACpF;YACC,QAAQ,IAAI,CAAC,sCAAsC,aAAa,cAAc;YAC9E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAgB,SAAS,aAAa,cAAc;YAAC,GAAG;gBAAE,QAAQ;YAAI,IAAI,+BAA+B;QAClJ,OAAO;YACH,QAAQ,IAAI,CAAC;QACjB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,YAAY;QAAe;IAE1D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,oBAAoB;QAClC,0DAA0D;QAC1D,IAAI,MAAM,IAAI,KAAK,gBAAgB,MAAM,KAAK,EAAE;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,CAAC,6CAA6C,EAAE,MAAM,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI,IAAI,sBAAsB;QACpJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,MAAM,OAAO,IAAI;QAA8C,GAAG;YAAE,QAAQ;QAAI;IACxH;AACJ","debugId":null}}]
}