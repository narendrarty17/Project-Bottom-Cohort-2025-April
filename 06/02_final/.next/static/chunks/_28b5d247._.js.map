{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/06/01_initial/firebase/firebaseConfig.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\n// adding authentication library\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBxPiOrmxB39SGzMUOpETa-GI0iF-u1D6c\",\n  authDomain: \"stocktracker-f22f7.firebaseapp.com\",\n  projectId: \"stocktracker-f22f7\",\n  storageBucket: \"stocktracker-f22f7.firebasestorage.app\",\n  messagingSenderId: \"962553682319\",\n  appId: \"1:962553682319:web:79e895662a44d928ccd3fa\",\n  measurementId: \"G-KFSZLDZ720\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// exporting our authentication feature\nexport const  auth = getAuth(app);\n\nexport default app;"],"names":[],"mappings":"AAAA,uDAAuD;;;;;AACvD;AAAA;AACA;AAEA,gCAAgC;AAChC;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;IACP,eAAe;AACjB;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;AAGnB,MAAO,OAAO,CAAA,GAAA,6MAAA,CAAA,UAAO,AAAD,EAAE;uCAEd","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/06/01_initial/app/login/page.js"],"sourcesContent":["// app/login/page.js\n'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '../context/AuthContext'; // Adjust path if needed\n\n// --- Firebase Imports ---\nimport { auth } from '../../firebase/firebaseConfig'; // Adjust path to your firebaseConfig.js\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\n// --- End Firebase Imports ---\n\nexport default function LoginPage() {\n    const [email, setEmail] = useState(''); // State for email\n    const [password, setPassword] = useState(''); // State for password\n    const [message, setMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const router = useRouter();\n    const { loginUser } = useAuth(); // Keep using your context for now\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setMessage('');\n        setIsLoading(true);\n\n        // Basic validation (optional, but good practice)\n        if (!email || !password) {\n            setMessage('Please fill in both email and password.');\n            setIsLoading(false);\n            return;\n        }\n\n        try {\n            // --- Firebase Authentication Logic ---\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\n            const user = userCredential.user;\n            // --- End Firebase Authentication Logic ---\n\n            // Login successful\n            console.log('Login successful via Firebase for user:', user.email, 'UID:', user.uid);\n            setMessage(\"Login successful!\"); // Set success message\n\n            // --- Update Auth Context ---\n            // Modify loginUser in your AuthContext to handle the Firebase user object\n            // It should ideally store user.uid, user.email, etc.\n            loginUser(email.split('@')[0]); // Pass the whole Firebase user object to your context\n\n            // Redirect on successful login\n            router.push('/');\n\n        } catch (error) {\n            // --- Firebase Error Handling ---\n            console.error('Firebase Login Error:', error.code, error.message);\n            let friendlyMessage = 'Login failed. Please try again.'; // Default message\n            switch (error.code) {\n                case 'auth/invalid-email':\n                    friendlyMessage = 'Invalid email format.';\n                    break;\n                case 'auth/user-not-found': // Deprecated, use 'auth/invalid-credential'\n                case 'auth/wrong-password': // Deprecated, use 'auth/invalid-credential'\n                case 'auth/invalid-credential':\n                    friendlyMessage = 'Invalid email or password.';\n                    break;\n                case 'auth/user-disabled':\n                    friendlyMessage = 'This user account has been disabled.';\n                    break;\n                // Add more specific cases as needed\n                default:\n                    friendlyMessage = `Login failed: ${error.message}`; // More specific if possible\n            }\n            setMessage(friendlyMessage);\n            // --- End Firebase Error Handling ---\n\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // Determine message color (remains the same)\n    const messageIsError = message.toLowerCase().includes('fail') || message.toLowerCase().includes('invalid') || message.toLowerCase().includes('error') || message.toLowerCase().includes('fill');\n    const messageColor = messageIsError ? 'text-red-600' : 'text-green-600';\n\n    // --- Update JSX Form ---\n    return (\n        <div className=\"flex items-center justify-center min-h-screen bg-gray-100 px-4 sm:px-6 lg:px-8\">\n            <div className=\"w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md\">\n                <h1 className=\"text-2xl font-bold text-center text-gray-900\">\n                    Log in to your account\n                </h1>\n                {/* Change to controlled components for easier state management */}\n                <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                    <div>\n                        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">Email Address</label>\n                        <input\n                            type=\"email\" // Change type to email\n                            id=\"email\"\n                            name=\"email\"\n                            value={email} // Controlled input\n                            onChange={(e) => setEmail(e.target.value)} // Update state on change\n                            required\n                            disabled={isLoading}\n                            className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:opacity-50 disabled:bg-gray-200\"\n                            placeholder=\"you@example.com\"\n                         />\n                    </div>\n                    <div>\n                        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            value={password} // Controlled input\n                            onChange={(e) => setPassword(e.target.value)} // Update state on change\n                            required\n                            disabled={isLoading}\n                            className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:opacity-50 disabled:bg-gray-200\" />\n                    </div>\n                    <div>\n                        <button type=\"submit\" disabled={isLoading} className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed\">\n                            {isLoading ? 'Logging in...' : 'Login'}\n                        </button>\n                    </div>\n                </form>\n                {/* Message Area */}\n                {message && !isLoading && (\n                   <p className={`text-sm text-center ${messageColor} mt-4`}>{message}</p>\n               )}\n               {/* Link to Register */}\n               <p className=\"mt-4 text-center text-sm text-gray-600\">\n                   Don't have an account?{' '}\n                   {/* Make sure you have a registration page setup with Firebase */}\n                   <a href=\"/register\" className=\"font-medium text-indigo-600 hover:text-indigo-500 hover:underline\">Register here</a>\n               </p>\n            </div>\n        </div>\n    );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/06/01_initial/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"file":"index.esm.js","sources":["file:///Users/narendrakumar/Documents/06/01_initial/node_modules/firebase/app/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;CAeG,+LAIH,kBAAA,AAAe,EAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"file":"index.esm2017.js","sources":["file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/util/constants.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/util/errors.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/functions/common.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/functions/create-installation-request.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/util/sleep.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/generate-fid.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/util/get-key.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/fid-changed.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/idb-manager.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/get-installation-entry.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/functions/generate-auth-token-request.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/refresh-auth-token.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/api/get-id.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/api/get-token.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/functions/delete-installation-request.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/api/delete-installations.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/api/on-id-change.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/api/get-installations.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/helpers/extract-app-config.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/functions/config.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make TypeScript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID cannot be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * The Firebase Installations Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"debugId":null}},
    {"offset": {"line": 1427, "column": 0}, "map": {"version":3,"file":"index.esm2017.js","sources":["file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/constants.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/logger.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/errors.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/helpers.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/get-config.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/functions.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/initialize-analytics.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/factory.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/api.ts","file:///Users/narendrakumar/Documents/06/01_initial/node_modules/%40firebase/analytics/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config',\n  CONSENT = 'consent',\n  GET = 'get'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id',\n  NO_CLIENT_ID = 'no-client-id',\n  INVALID_GTAG_RESOURCE = 'invalid-gtag-resource'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-initialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.',\n  [AnalyticsError.NO_CLIENT_ID]: 'The \"client_id\" field is empty.',\n  [AnalyticsError.INVALID_GTAG_RESOURCE]:\n    'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n  [AnalyticsError.INVALID_GTAG_RESOURCE]: { gtagURL: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Verifies and creates a TrustedScriptURL.\n */\nexport function createGtagTrustedTypesScriptURL(url: string): string {\n  if (!url.startsWith(GTAG_URL)) {\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_GTAG_RESOURCE, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\n *\n * @param policyName A string containing the name of the policy\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\n * | the TrustedTypePolicy reference documentation}.\n */\nexport function createTrustedTypesPolicy(\n  policyName: string,\n  policyOptions: Partial<TrustedTypePolicyOptions>\n): Partial<TrustedTypePolicy> | undefined {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  let trustedTypesPolicy: Partial<TrustedTypePolicy> | undefined;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(\n      policyName,\n      policyOptions\n    );\n  }\n  return trustedTypesPolicy;\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const trustedTypesPolicy = createTrustedTypesPolicy(\n    'firebase-js-sdk-policy',\n    {\n      createScriptURL: createGtagTrustedTypesScriptURL\n    }\n  );\n\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  (script.src as string | TrustedScriptURL) = trustedTypesPolicy\n    ? (trustedTypesPolicy as TrustedTypePolicy)?.createScriptURL(gtagScriptURL)\n    : gtagScriptURL;\n\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever initialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent' | 'get' | string,\n    ...args: unknown[]\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        const [measurementId, gtagParams] = args;\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        const [measurementId, gtagParams] = args;\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        const [consentAction, gtagParams] = args;\n        // consentAction can be one of 'default' or 'update'.\n        gtagCore(\n          GtagCommand.CONSENT,\n          consentAction,\n          gtagParams as ConsentSettings\n        );\n      } else if (command === GtagCommand.GET) {\n        const [measurementId, fieldName, callback] = args;\n        gtagCore(\n          GtagCommand.GET,\n          measurementId as string,\n          fieldName as string,\n          callback as (...args: unknown[]) => void\n        );\n      } else if (command === GtagCommand.SET) {\n        const [customParams] = args;\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, customParams as CustomParams);\n      } else {\n        gtagCore(command, ...args);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nexport function findGtagScriptOnPage(\n  dataLayerName: string\n): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (\n      tag.src &&\n      tag.src.includes(GTAG_URL) &&\n      tag.src.includes(dataLayerName)\n    ) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n */\nexport async function internalGetGoogleAnalyticsClientId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>\n): Promise<string> {\n  const measurementId = await initializationPromise;\n  return new Promise((resolve, reject) => {\n    gtagFunction(\n      GtagCommand.GET,\n      measurementId,\n      'client_id',\n      (clientId: string) => {\n        if (!clientId) {\n          reject(ERROR_FACTORY.create(AnalyticsError.NO_CLIENT_ID));\n        }\n        resolve(clientId);\n      }\n    );\n  });\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit,\n  internalGetGoogleAnalyticsClientId\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport async function getGoogleAnalyticsClientId(\n  analyticsInstance: Analytics\n): Promise<string> {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  return internalGetGoogleAnalyticsClientId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!]\n  );\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/views\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n","/**\n * The Firebase Analytics Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e as Error\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"],"names":["logEvent","setCurrentScreen","setUserId","setUserProperties","setAnalyticsCollectionEnabled","internalSetCurrentScreen","internalSetUserId","internalSetUserProperties","internalSetAnalyticsCollectionEnabled","internalLogEvent"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 2589, "column": 0}, "map": {"version":3,"file":"index.esm.js","sources":[],"names":[],"mappings":"","debugId":null}}]
}