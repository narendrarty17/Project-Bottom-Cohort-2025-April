{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/GitHub/Project-Top-Cohort-2025-April/02/02_final/lib/authUtils.js"],"sourcesContent":["// lib/authUtils.js\nimport fs from 'fs/promises';\nimport path from 'path';\nimport bcrypt from 'bcryptjs'; // Use bcryptjs\n\n// Configuration\nexport const SALT_ROUNDS = 10; // Cost factor for hashing\nexport const DATA_FILE_PATH = path.join(process.cwd(), 'data', 'users.json'); // Store in ./data/users.json\n\n// Ensure data directory exists\nconst dataDir = path.dirname(DATA_FILE_PATH);\nfs.mkdir(dataDir, { recursive: true }).catch(console.error); // Create 'data' dir if it doesn't exist\n\n// Helper function to read users data\nexport async function readUsers() {\n    try {\n        await fs.access(DATA_FILE_PATH); // Check if file exists\n        const jsonData = await fs.readFile(DATA_FILE_PATH, 'utf-8');\n        // Handle empty file case\n        return jsonData ? JSON.parse(jsonData) : [];\n    } catch (error) {\n        // If file doesn't exist, return empty array (it will be created on first write)\n        if (error.code === 'ENOENT') {\n            console.log('users.json not found, starting with empty list.');\n            return [];\n        } else {\n            console.error('Error reading or parsing users.json:', error);\n            // More robust error handling might be needed in production\n            throw new Error('Could not read user data.');\n        }\n    }\n}\n\n// Helper function to write users data\nexport async function writeUsers(data) {\n    try {\n        const jsonData = JSON.stringify(data, null, 2); // Pretty print JSON\n        await fs.writeFile(DATA_FILE_PATH, jsonData, 'utf-8');\n    } catch (error) {\n        console.error('Error writing users.json:', error);\n        throw new Error('Could not save user data.');\n    }\n}\n\n// Helper function to hash password\nexport async function hashPassword(password) {\n    return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\n// Helper function to verify password\nexport async function verifyPassword(password, hashedPassword) {\n    return await bcrypt.compare(password, hashedPassword);\n}"],"names":[],"mappings":"AAAA,mBAAmB;;;;;;;;;AACnB;AACA;AACA,wOAA+B,eAAe;;;;AAGvC,MAAM,cAAc,IAAI,0BAA0B;AAClD,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,eAAe,6BAA6B;AAE3G,+BAA+B;AAC/B,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAC7B,qHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,SAAS;IAAE,WAAW;AAAK,GAAG,KAAK,CAAC,QAAQ,KAAK,GAAG,wCAAwC;AAG9F,eAAe;IAClB,IAAI;QACA,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC,iBAAiB,uBAAuB;QACxD,MAAM,WAAW,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,gBAAgB;QACnD,yBAAyB;QACzB,OAAO,WAAW,KAAK,KAAK,CAAC,YAAY,EAAE;IAC/C,EAAE,OAAO,OAAO;QACZ,gFAAgF;QAChF,IAAI,MAAM,IAAI,KAAK,UAAU;YACzB,QAAQ,GAAG,CAAC;YACZ,OAAO,EAAE;QACb,OAAO;YACH,QAAQ,KAAK,CAAC,wCAAwC;YACtD,2DAA2D;YAC3D,MAAM,IAAI,MAAM;QACpB;IACJ;AACJ;AAGO,eAAe,WAAW,IAAI;IACjC,IAAI;QACA,MAAM,WAAW,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI,oBAAoB;QACpE,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,gBAAgB,UAAU;IACjD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IACpB;AACJ;AAGO,eAAe,aAAa,QAAQ;IACvC,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACvC;AAGO,eAAe,eAAe,QAAQ,EAAE,cAAc;IACzD,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AAC1C","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/GitHub/Project-Top-Cohort-2025-April/02/02_final/app/api/auth/login/route.js"],"sourcesContent":["// app/api/auth/login/route.js\nimport { NextResponse } from 'next/server';\nimport { readUsers, verifyPassword } from '@/lib/authUtils'; // Adjust path if needed\n\nexport async function POST(request) {\n    try {\n        const body = await request.json();\n        const { username, password } = body;\n\n        // Basic Validation\n        if (!username || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Username and password are required.' },\n                { status: 400 } // Bad Request\n            );\n        }\n\n        const users = await readUsers();\n\n        // Find user by username (case-insensitive)\n        const user = users.find(u => u.username.toLowerCase() === username.toLowerCase());\n\n        if (!user) {\n            console.log(`API Login attempt failed: User ${username} not found.`);\n             // Use a generic message for security\n            return NextResponse.json(\n                { success: false, message: 'Invalid credentials.' },\n                { status: 401 } // Unauthorized\n            );\n        }\n\n        // Verify the password\n        const passwordMatch = await verifyPassword(password, user.password);\n\n        if (passwordMatch) {\n            console.log(`API Login successful for user: ${username}`);\n            // IMPORTANT: In a real app, generate a session token/JWT here\n            // and include it in the response or set an HttpOnly cookie.\n            // Never send the password hash back to the client.\n            return NextResponse.json(\n                { success: true, message: 'Login successful!', user: { username: user.username } },\n                { status: 200 } // OK\n            );\n        } else {\n            console.log(`API Login attempt failed: Incorrect password for user ${username}.`);\n             // Use a generic message for security\n            return NextResponse.json(\n                { success: false, message: 'Invalid credentials.' },\n                { status: 401 } // Unauthorized\n            );\n        }\n\n    } catch (error) {\n        console.error(\"API Login Error:\", error);\n         // Don't expose detailed internal errors during login\n        return NextResponse.json(\n            { success: false, message: 'An error occurred during login.' },\n            { status: 500 } // Internal Server Error\n        );\n    }\n}"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA,yMAA6D,wBAAwB;;;AAE9E,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,mBAAmB;QACnB,IAAI,CAAC,YAAY,CAAC,UAAU;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAAsC,GACjE;gBAAE,QAAQ;YAAI,EAAE,cAAc;;QAEtC;QAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAE5B,2CAA2C;QAC3C,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,CAAC,WAAW,OAAO,SAAS,WAAW;QAE9E,IAAI,CAAC,MAAM;YACP,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,SAAS,WAAW,CAAC;YAClE,qCAAqC;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAClD;gBAAE,QAAQ;YAAI,EAAE,eAAe;;QAEvC;QAEA,sBAAsB;QACtB,MAAM,gBAAgB,MAAM,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD,EAAE,UAAU,KAAK,QAAQ;QAElE,IAAI,eAAe;YACf,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,UAAU;YACxD,8DAA8D;YAC9D,4DAA4D;YAC5D,mDAAmD;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAM,SAAS;gBAAqB,MAAM;oBAAE,UAAU,KAAK,QAAQ;gBAAC;YAAE,GACjF;gBAAE,QAAQ;YAAI,EAAE,KAAK;;QAE7B,OAAO;YACH,QAAQ,GAAG,CAAC,CAAC,sDAAsD,EAAE,SAAS,CAAC,CAAC;YAC/E,qCAAqC;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAClD;gBAAE,QAAQ;YAAI,EAAE,eAAe;;QAEvC;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,oBAAoB;QACjC,qDAAqD;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,SAAS;QAAkC,GAC7D;YAAE,QAAQ;QAAI,EAAE,wBAAwB;;IAEhD;AACJ","debugId":null}}]
}