{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/GitHub/Project-Top-Cohort-2025-April/05/02_Final/app/context/AuthContext.js"],"sourcesContent":["// app/context/AuthContext.js\n'use client';\n\n// Keep React imports, remove useEffect from here if not used elsewhere\nimport React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\n\nconst AUTH_STORAGE_KEY = 'authUser';\n\nconst AuthContext = createContext({\n  user: null,\n  // Keep placeholders\n  loginUser: () => { console.warn('loginUser function called without AuthProvider'); },\n  logoutUser: () => { console.warn('logoutUser function called without AuthProvider'); },\n});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  // 1. Initialize state to null consistently on server and client initial render\n  const [user, setUser] = useState(null);\n  // Add a state to track if hydration is complete and localStorage has been checked\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // 2. Use useEffect to load state from localStorage AFTER initial mount/hydration\n  useEffect(() => {\n    // This effect runs only on the client, after the component mounts\n    try {\n      const storedUser = window.localStorage.getItem(AUTH_STORAGE_KEY);\n      if (storedUser) {\n        setUser(storedUser); // Set state based on localStorage\n        console.log(`Auth Context: User '${storedUser}' loaded from localStorage`);\n      } else {\n        console.log('Auth Context: No user found in localStorage');\n      }\n    } catch (error) {\n      setUser(null);\n    } finally {\n        // Mark initialization as complete regardless of finding a user or errors\n        setIsInitialized(true);\n    }\n    // Run this effect only once on mount\n  }, []);\n\n  // 3. Update localStorage when user state changes (login/logout)\n  useEffect(() => {\n    // Only attempt to write to localStorage after initial check is done\n    // And ensure we are on the client\n    if (isInitialized && typeof window !== 'undefined') {\n      try {\n        if (user) {\n          // If storing complex objects, use JSON.stringify\n          // window.localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(user));\n          window.localStorage.setItem(AUTH_STORAGE_KEY, user);\n        } else {\n          window.localStorage.removeItem(AUTH_STORAGE_KEY);\n        }\n      } catch (error) {\n        console.error(\"Auth Context: Error writing to localStorage key “\" + AUTH_STORAGE_KEY + \"”:\", error);\n      }\n    }\n    // Run this effect when user state changes *or* initialization completes\n  }, [user, isInitialized]);\n\n  // Login function remains the same - it just calls setUser\n  const loginUser = useCallback((username) => {\n    if (username) {\n      setUser(username);\n      console.log(`Auth Context: User logged in as '${username}'`);\n    } else {\n      console.warn('Auth Context: Attempted to login with empty username');\n      setUser(null);\n    }\n  }, []);\n\n  // Logout function remains the same - it just calls setUser\n  const logoutUser = useCallback(() => {\n    setUser(null);\n    console.log('Auth Context: User logged out');\n  }, []);\n\n  // Include isInitialized in the context value if components need to wait for auth check\n  const value = {\n    user,\n    isInitialized, // Components can use this to show loading states\n    loginUser,\n    logoutUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};"],"names":[],"mappings":"AAAA,6BAA6B;;;;;;AAG7B,uEAAuE;AACvE;;;AAHA;;AAKA,MAAM,mBAAmB;AAEzB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAE;IAChC,MAAM;IACN,oBAAoB;IACpB,WAAW;QAAQ,QAAQ,IAAI,CAAC;IAAmD;IACnF,YAAY;QAAQ,QAAQ,IAAI,CAAC;IAAoD;AACvF;AAEO,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;GANa;AAQN,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAE;;IACvC,+EAA+E;IAC/E,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,kFAAkF;IAClF,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,iFAAiF;IACjF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,kEAAkE;YAClE,IAAI;gBACF,MAAM,aAAa,OAAO,YAAY,CAAC,OAAO,CAAC;gBAC/C,IAAI,YAAY;oBACd,QAAQ,aAAa,kCAAkC;oBACvD,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,WAAW,0BAA0B,CAAC;gBAC3E,OAAO;oBACL,QAAQ,GAAG,CAAC;gBACd;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ;YACV,SAAU;gBACN,yEAAyE;gBACzE,iBAAiB;YACrB;QACA,qCAAqC;QACvC;iCAAG,EAAE;IAEL,gEAAgE;IAChE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,oEAAoE;YACpE,kCAAkC;YAClC,IAAI,iBAAiB,aAAkB,aAAa;gBAClD,IAAI;oBACF,IAAI,MAAM;wBACR,iDAAiD;wBACjD,uEAAuE;wBACvE,OAAO,YAAY,CAAC,OAAO,CAAC,kBAAkB;oBAChD,OAAO;wBACL,OAAO,YAAY,CAAC,UAAU,CAAC;oBACjC;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,sDAAsD,mBAAmB,MAAM;gBAC/F;YACF;QACA,wEAAwE;QAC1E;iCAAG;QAAC;QAAM;KAAc;IAExB,0DAA0D;IAC1D,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;+CAAE,CAAC;YAC7B,IAAI,UAAU;gBACZ,QAAQ;gBACR,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,SAAS,CAAC,CAAC;YAC7D,OAAO;gBACL,QAAQ,IAAI,CAAC;gBACb,QAAQ;YACV;QACF;8CAAG,EAAE;IAEL,2DAA2D;IAC3D,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE;YAC7B,QAAQ;YACR,QAAQ,GAAG,CAAC;QACd;+CAAG,EAAE;IAEL,uFAAuF;IACvF,MAAM,QAAQ;QACZ;QACA;QACA;QACA;IACF;IAEA,qBAAO,6LAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;IAxEa;KAAA","debugId":null}}]
}