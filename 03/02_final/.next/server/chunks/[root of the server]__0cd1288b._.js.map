{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/Session_02_Final/lib/authUtils.js"],"sourcesContent":["// lib/authUtils.js\nimport fs from 'fs/promises';\nimport path from 'path';\nimport bcrypt from 'bcryptjs'; // Use bcryptjs\n\n// Configuration\nexport const SALT_ROUNDS = 10; // Cost factor for hashing\nexport const DATA_FILE_PATH = path.join(process.cwd(), 'data', 'users.json'); // Store in ./data/users.json\n\n// Ensure data directory exists\nconst dataDir = path.dirname(DATA_FILE_PATH);\nfs.mkdir(dataDir, { recursive: true }).catch(console.error); // Create 'data' dir if it doesn't exist\n\n// Helper function to read users data\nexport async function readUsers() {\n    try {\n        await fs.access(DATA_FILE_PATH); // Check if file exists\n        const jsonData = await fs.readFile(DATA_FILE_PATH, 'utf-8');\n        // Handle empty file case\n        return jsonData ? JSON.parse(jsonData) : [];\n    } catch (error) {\n        // If file doesn't exist, return empty array (it will be created on first write)\n        if (error.code === 'ENOENT') {\n            console.log('users.json not found, starting with empty list.');\n            return [];\n        } else {\n            console.error('Error reading or parsing users.json:', error);\n            // More robust error handling might be needed in production\n            throw new Error('Could not read user data.');\n        }\n    }\n}\n\n// Helper function to write users data\nexport async function writeUsers(data) {\n    try {\n        const jsonData = JSON.stringify(data, null, 2); // Pretty print JSON\n        await fs.writeFile(DATA_FILE_PATH, jsonData, 'utf-8');\n    } catch (error) {\n        console.error('Error writing users.json:', error);\n        throw new Error('Could not save user data.');\n    }\n}\n\n// Helper function to hash password\nexport async function hashPassword(password) {\n    return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\n// Helper function to verify password\nexport async function verifyPassword(password, hashedPassword) {\n    return await bcrypt.compare(password, hashedPassword);\n}"],"names":[],"mappings":"AAAA,mBAAmB;;;;;;;;;AACnB;AACA;;;;;;;;;AAIO,MAAM,cAAc,IAAI,0BAA0B;AAClD,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,eAAe,6BAA6B;AAE3G,+BAA+B;AAC/B,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAC7B,qHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,SAAS;IAAE,WAAW;AAAK,GAAG,KAAK,CAAC,QAAQ,KAAK,GAAG,wCAAwC;AAG9F,eAAe;IAClB,IAAI;QACA,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC,iBAAiB,uBAAuB;QACxD,MAAM,WAAW,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,gBAAgB;QACnD,yBAAyB;QACzB,OAAO,WAAW,KAAK,KAAK,CAAC,YAAY,EAAE;IAC/C,EAAE,OAAO,OAAO;QACZ,gFAAgF;QAChF,IAAI,MAAM,IAAI,KAAK,UAAU;YACzB,QAAQ,GAAG,CAAC;YACZ,OAAO,EAAE;QACb,OAAO;YACH,QAAQ,KAAK,CAAC,wCAAwC;YACtD,2DAA2D;YAC3D,MAAM,IAAI,MAAM;QACpB;IACJ;AACJ;AAGO,eAAe,WAAW,IAAI;IACjC,IAAI;QACA,MAAM,WAAW,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI,oBAAoB;QACpE,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,gBAAgB,UAAU;IACjD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IACpB;AACJ;AAGO,eAAe,aAAa,QAAQ;IACvC,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU;AACvC;AAGO,eAAe,eAAe,QAAQ,EAAE,cAAc;IACzD,OAAO,MAAM,OAAO,OAAO,CAAC,UAAU;AAC1C","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/Session_02_Final/app/api/auth/register/route.js"],"sourcesContent":["// app/api/auth/register/route.js\nimport { NextResponse } from 'next/server';\nimport { readUsers, writeUsers, hashPassword } from '@/lib/authUtils'; // Adjust path if needed\n\nexport async function POST(request) {\n    try {\n        const body = await request.json();\n        const { username, password } = body;\n\n        // --- Basic Validation ---\n        if (!username || !password) {\n            return NextResponse.json(\n                { success: false, message: 'Username and password are required.' },\n                { status: 400 } // Bad Request\n            );\n        }\n        if (password.length < 6) {\n            return NextResponse.json(\n                { success: false, message: 'Password must be at least 6 characters long.' },\n                { status: 400 }\n            );\n        }\n        // --- End Validation ---\n\n        const users = await readUsers();\n\n        // Check if username already exists (case-insensitive)\n        const existingUser = users.find(user => user.username.toLowerCase() === username.toLowerCase());\n        if (existingUser) {\n            return NextResponse.json(\n                { success: false, message: 'Username already taken.' },\n                { status: 409 } // Conflict\n            );\n        }\n\n        // Hash the password\n        const hashedPassword = await hashPassword(password);\n\n        // Add new user\n        users.push({ username, password: hashedPassword });\n\n        // Write updated data back to file\n        await writeUsers(users);\n\n        console.log(`API: User registered: ${username}`);\n        return NextResponse.json(\n            { success: true, message: 'Registration successful!' },\n            { status: 201 } // Created\n        );\n\n    } catch (error) {\n        console.error(\"API Registration Error:\", error);\n        // Distinguish between file read/write errors and others\n        const errorMessage = error.message.includes('Could not')\n            ? 'Server error saving user data.'\n            : 'An unexpected error occurred during registration.';\n        return NextResponse.json(\n            { success: false, message: errorMessage },\n            { status: 500 } // Internal Server Error\n        );\n    }\n}"],"names":[],"mappings":"AAAA,iCAAiC;;;;AACjC;AACA,yMAAuE,wBAAwB;;;AAExF,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,2BAA2B;QAC3B,IAAI,CAAC,YAAY,CAAC,UAAU;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAAsC,GACjE;gBAAE,QAAQ;YAAI,EAAE,cAAc;;QAEtC;QACA,IAAI,SAAS,MAAM,GAAG,GAAG;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAA+C,GAC1E;gBAAE,QAAQ;YAAI;QAEtB;QACA,yBAAyB;QAEzB,MAAM,QAAQ,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAE5B,sDAAsD;QACtD,MAAM,eAAe,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,QAAQ,CAAC,WAAW,OAAO,SAAS,WAAW;QAC5F,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GACrD;gBAAE,QAAQ;YAAI,EAAE,WAAW;;QAEnC;QAEA,oBAAoB;QACpB,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,eAAY,AAAD,EAAE;QAE1C,eAAe;QACf,MAAM,IAAI,CAAC;YAAE;YAAU,UAAU;QAAe;QAEhD,kCAAkC;QAClC,MAAM,CAAA,GAAA,kHAAA,CAAA,aAAU,AAAD,EAAE;QAEjB,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,UAAU;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAM,SAAS;QAA2B,GACrD;YAAE,QAAQ;QAAI,EAAE,UAAU;;IAGlC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,wDAAwD;QACxD,MAAM,eAAe,MAAM,OAAO,CAAC,QAAQ,CAAC,eACtC,mCACA;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,SAAS;QAAa,GACxC;YAAE,QAAQ;QAAI,EAAE,wBAAwB;;IAEhD;AACJ","debugId":null}}]
}