{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/Session_02_Final/app/actions/actions.js"],"sourcesContent":["// actions.js (or lib/actions.js)\n'use client'; // <--- forcefully added client so is workable in client machine alone\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport bcrypt from 'bcrypt';\n\nconst saltRounds = 10; // Cost factor for hashing\nconst dataFilePath = path.join(process.cwd(), 'users.json'); // Store users.json in project root\n\n// Helper function to read users data\nasync function readUsers() {\n    try {\n        // Check if file exists first\n        await fs.access(dataFilePath);\n        const jsonData = await fs.readFile(dataFilePath, 'utf-8');\n        return JSON.parse(jsonData);\n    } catch (error) {\n        // If file doesn't exist or is empty/invalid JSON, return empty array\n        if (error.code === 'ENOENT') {\n            console.log('users.json not found, starting with empty list.');\n            return [];\n        } else {\n            console.error('Error reading or parsing users.json:', error);\n            // In a real app, you might want to throw a more specific error\n            // or handle corrupted data recovery. For now, return empty.\n            return [];\n        }\n    }\n}\n\n// Helper function to write users data\nasync function writeUsers(data) {\n    try {\n        const jsonData = JSON.stringify(data, null, 2); // Pretty print JSON\n        await fs.writeFile(dataFilePath, jsonData, 'utf-8');\n    } catch (error) {\n        console.error('Error writing users.json:', error);\n        throw new Error('Could not save user data.'); // Propagate error\n    }\n}\n\n// --- Registration Action ---\nexport async function registerUser(formData) {\n    const username = formData.get('username')?.toString().trim();\n    const password = formData.get('password')?.toString();\n\n    if (!username || !password) {\n        return { success: false, message: 'Username and password are required.' };\n    }\n\n    // Basic password strength check (example)\n    if (password.length < 6) {\n         return { success: false, message: 'Password must be at least 6 characters long.' };\n    }\n\n    try {\n        const users = await readUsers();\n\n        // Check if username already exists\n        const existingUser = users.find(user => user.username.toLowerCase() === username.toLowerCase());\n        if (existingUser) {\n            return { success: false, message: 'Username already taken.' };\n        }\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n        // Add new user\n        users.push({ username, password: hashedPassword });\n\n        // Write updated data back to file\n        await writeUsers(users);\n\n        console.log(`User registered: ${username}`);\n        return { success: true, message: 'Registration successful!' };\n\n    } catch (error) {\n        console.error(\"Registration Error:\", error);\n        return { success: false, message: error.message || 'Registration failed. Please try again.' };\n    }\n}\n\n\n// --- Login Action ---\nexport async function loginUser(formData) {\n    const username = formData.get('username')?.toString().trim();\n    const password = formData.get('password')?.toString();\n\n    if (!username || !password) {\n        return { success: false, message: 'Username and password are required.' };\n    }\n\n    try {\n        const users = await readUsers();\n\n        // Find user by username (case-insensitive comparison is often good practice)\n        const user = users.find(u => u.username.toLowerCase() === username.toLowerCase());\n\n        if (!user) {\n            console.log(`Login attempt failed: User ${username} not found.`);\n            return { success: false, message: 'Invalid username or password.' }; // Generic message\n        }\n\n        // Compare submitted password with stored hash\n        const passwordMatch = await bcrypt.compare(password, user.password);\n\n        if (passwordMatch) {\n            console.log(`Login successful for user: ${username}`);\n            // IMPORTANT: In a real app, you'd generate a session token here\n            // and send it back or set a cookie. For this example, just success.\n            return { success: true, message: 'Login successful!', user: { username: user.username } }; // Don't send password hash back!\n        } else {\n            console.log(`Login attempt failed: Incorrect password for user ${username}.`);\n            return { success: false, message: 'Invalid username or password.' }; // Generic message\n        }\n\n    } catch (error) {\n         console.error(\"Login Error:\", error);\n        // Don't expose detailed error info during login\n         return { success: false, message: 'An error occurred during login. Please try again.' };\n    }\n}"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAQF;;;;;;AAJ/B;AACA;AAJA,cAAc,sEAAsE;;;;AAMpF,MAAM,aAAa,IAAI,0BAA0B;AACjD,MAAM,eAAe,+HAAA,CAAA,UAAI,CAAC,IAAI,CAAC,gKAAA,CAAA,UAAO,CAAC,GAAG,IAAI,eAAe,mCAAmC;AAEhG,qCAAqC;AACrC,eAAe;IACX,IAAI;QACA,6BAA6B;QAC7B,MAAM,GAAG,MAAM,CAAC;QAChB,MAAM,WAAW,MAAM,GAAG,QAAQ,CAAC,cAAc;QACjD,OAAO,KAAK,KAAK,CAAC;IACtB,EAAE,OAAO,OAAO;QACZ,qEAAqE;QACrE,IAAI,MAAM,IAAI,KAAK,UAAU;YACzB,QAAQ,GAAG,CAAC;YACZ,OAAO,EAAE;QACb,OAAO;YACH,QAAQ,KAAK,CAAC,wCAAwC;YACtD,+DAA+D;YAC/D,4DAA4D;YAC5D,OAAO,EAAE;QACb;IACJ;AACJ;AAEA,sCAAsC;AACtC,eAAe,WAAW,IAAI;IAC1B,IAAI;QACA,MAAM,WAAW,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI,oBAAoB;QACpE,MAAM,GAAG,SAAS,CAAC,cAAc,UAAU;IAC/C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM,8BAA8B,kBAAkB;IACpE;AACJ;AAGO,eAAe,aAAa,QAAQ;IACvC,MAAM,WAAW,SAAS,GAAG,CAAC,aAAa,WAAW;IACtD,MAAM,WAAW,SAAS,GAAG,CAAC,aAAa;IAE3C,IAAI,CAAC,YAAY,CAAC,UAAU;QACxB,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsC;IAC5E;IAEA,0CAA0C;IAC1C,IAAI,SAAS,MAAM,GAAG,GAAG;QACpB,OAAO;YAAE,SAAS;YAAO,SAAS;QAA+C;IACtF;IAEA,IAAI;QACA,MAAM,QAAQ,MAAM;QAEpB,mCAAmC;QACnC,MAAM,eAAe,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,QAAQ,CAAC,WAAW,OAAO,SAAS,WAAW;QAC5F,IAAI,cAAc;YACd,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAA0B;QAChE;QAEA,oBAAoB;QACpB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,eAAe;QACf,MAAM,IAAI,CAAC;YAAE;YAAU,UAAU;QAAe;QAEhD,kCAAkC;QAClC,MAAM,WAAW;QAEjB,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,UAAU;QAC1C,OAAO;YAAE,SAAS;YAAM,SAAS;QAA2B;IAEhE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;YAAE,SAAS;YAAO,SAAS,MAAM,OAAO,IAAI;QAAyC;IAChG;AACJ;AAIO,eAAe,UAAU,QAAQ;IACpC,MAAM,WAAW,SAAS,GAAG,CAAC,aAAa,WAAW;IACtD,MAAM,WAAW,SAAS,GAAG,CAAC,aAAa;IAE3C,IAAI,CAAC,YAAY,CAAC,UAAU;QACxB,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsC;IAC5E;IAEA,IAAI;QACA,MAAM,QAAQ,MAAM;QAEpB,6EAA6E;QAC7E,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,CAAC,WAAW,OAAO,SAAS,WAAW;QAE9E,IAAI,CAAC,MAAM;YACP,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,SAAS,WAAW,CAAC;YAC/D,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAAgC,GAAG,kBAAkB;QAC3F;QAEA,8CAA8C;QAC9C,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAElE,IAAI,eAAe;YACf,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,UAAU;YACpD,gEAAgE;YAChE,oEAAoE;YACpE,OAAO;gBAAE,SAAS;gBAAM,SAAS;gBAAqB,MAAM;oBAAE,UAAU,KAAK,QAAQ;gBAAC;YAAE,GAAG,iCAAiC;QAChI,OAAO;YACH,QAAQ,GAAG,CAAC,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC;YAC5E,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAAgC,GAAG,kBAAkB;QAC3F;IAEJ,EAAE,OAAO,OAAO;QACX,QAAQ,KAAK,CAAC,gBAAgB;QAC/B,gDAAgD;QAC/C,OAAO;YAAE,SAAS;YAAO,SAAS;QAAoD;IAC3F;AACJ","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/narendrakumar/Documents/Session_02_Final/app/register/page.js"],"sourcesContent":["// app/register/page.js\n'use client'; // <--- Make this a Client Component\n\nimport React, { useState, useTransition } from 'react';\nimport { registerUser } from '../actions/actions'; // Adjust path if actions.js is elsewhere (e.g., ../../actions)\n\nexport default function RegisterPage() {\n  const [message, setMessage] = useState('');\n  const [isPending, startTransition] = useTransition(); // For loading state\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setMessage(''); // Clear previous messages\n\n    const formData = new FormData(event.currentTarget);\n    const password = formData.get('password');\n    const confirmPassword = formData.get('confirmPassword');\n\n    // Basic client-side validation\n    if (password !== confirmPassword) {\n        setMessage('Passwords do not match.');\n        return;\n    }\n     if (!formData.get('username') || !password) {\n         setMessage('Please fill in all fields.');\n         return;\n     }\n\n    startTransition(async () => {\n      const result = await registerUser(formData);\n      setMessage(result.message);\n      if (result.success) {\n        // Optionally clear the form or redirect\n        event.target.reset(); // Clear form fields on success\n        // You might want to redirect to login:\n        // import { useRouter } from 'next/navigation';\n        // const router = useRouter();\n        // router.push('/login');\n      }\n    });\n  };\n\n  return (\n    <div>\n      <h1>Register</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"username\">Username:</label>\n          <input type=\"text\" id=\"username\" name=\"username\" required />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password:</label>\n          <input type=\"password\" id=\"password\" name=\"password\" required minLength=\"6\" />\n        </div>\n         <div>\n          <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n          <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required minLength=\"6\"/>\n        </div>\n        <button type=\"submit\" disabled={isPending}>\n          {isPending ? 'Registering...' : 'Register'}\n        </button>\n      </form>\n      {message && <p style={{ color: message.startsWith('Registration successful') ? 'green' : 'red' }}>{message}</p>}\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,uBAAuB;;;;;AAGvB;AACA,0NAAmD,+DAA+D;;;AAHlH,cAAc,oCAAoC;;;AAKnC,SAAS;;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,WAAW,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,KAAK,oBAAoB;IAE1E,MAAM,eAAe,OAAO;QAC1B,MAAM,cAAc;QACpB,WAAW,KAAK,0BAA0B;QAE1C,MAAM,WAAW,IAAI,SAAS,MAAM,aAAa;QACjD,MAAM,WAAW,SAAS,GAAG,CAAC;QAC9B,MAAM,kBAAkB,SAAS,GAAG,CAAC;QAErC,+BAA+B;QAC/B,IAAI,aAAa,iBAAiB;YAC9B,WAAW;YACX;QACJ;QACC,IAAI,CAAC,SAAS,GAAG,CAAC,eAAe,CAAC,UAAU;YACxC,WAAW;YACX;QACJ;QAED,gBAAgB;YACd,MAAM,SAAS,MAAM,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD,EAAE;YAClC,WAAW,OAAO,OAAO;YACzB,IAAI,OAAO,OAAO,EAAE;gBAClB,wCAAwC;gBACxC,MAAM,MAAM,CAAC,KAAK,IAAI,+BAA+B;YACrD,uCAAuC;YACvC,+CAA+C;YAC/C,8BAA8B;YAC9B,yBAAyB;YAC3B;QACF;IACF;IAEA,qBACE,6LAAC;;0BACC,6LAAC;0BAAG;;;;;;0BACJ,6LAAC;gBAAK,UAAU;;kCACd,6LAAC;;0CACC,6LAAC;gCAAM,SAAQ;0CAAW;;;;;;0CAC1B,6LAAC;gCAAM,MAAK;gCAAO,IAAG;gCAAW,MAAK;gCAAW,QAAQ;;;;;;;;;;;;kCAE3D,6LAAC;;0CACC,6LAAC;gCAAM,SAAQ;0CAAW;;;;;;0CAC1B,6LAAC;gCAAM,MAAK;gCAAW,IAAG;gCAAW,MAAK;gCAAW,QAAQ;gCAAC,WAAU;;;;;;;;;;;;kCAEzE,6LAAC;;0CACA,6LAAC;gCAAM,SAAQ;0CAAkB;;;;;;0CACjC,6LAAC;gCAAM,MAAK;gCAAW,IAAG;gCAAkB,MAAK;gCAAkB,QAAQ;gCAAC,WAAU;;;;;;;;;;;;kCAExF,6LAAC;wBAAO,MAAK;wBAAS,UAAU;kCAC7B,YAAY,mBAAmB;;;;;;;;;;;;YAGnC,yBAAW,6LAAC;gBAAE,OAAO;oBAAE,OAAO,QAAQ,UAAU,CAAC,6BAA6B,UAAU;gBAAM;0BAAI;;;;;;;;;;;;AAGzG;GA3DwB;;QAEe,6JAAA,CAAA,gBAAa;;;KAF5B","debugId":null}}]
}